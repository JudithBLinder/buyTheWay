{"version":3,"sources":["Component/Toolbar/Toolbar.js","Component/Auth/Register/Register.js","Component/Auth/Login/Login.js","Component/Map/Map.js","Component/Orders/Order/Order.js","Component/Pages/MainPage/MainPage.js","Component/Orders/Orders.js","App.js","Component/OrderForm/OrderForm.js","serviceWorker.js","index.js"],"names":["Toolbar","Navbar","bg","variant","Brand","href","Nav","className","Link","Component","Register","state","username","value","email","password","orderHandler","event","preventDefault","isUserExist","userData","userName","mail","axios","get","then","response","users","key","data","push","alert","console","log","post","catch","error","usernameChangedHandler","updatedElement","target","setState","emailChangedHandler","id","passwordChangedHandler","Form","Group","controlId","Label","Control","type","placeholder","this","onChange","Button","onClick","i","length","Map","markers","lat","lng","initLat","initLng","selectedMark","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","defaultZoom","defaultCenter","map","place","onCloseClick","MapWrapped","withScriptjs","withGoogleMap","MyMap","style","width","height","googleMapURL","loadingElement","containerElement","mapElement","order","test","props","history","address","phoneNumber","float","comments","fullName","reason","groceries","grocery","MainPage","App","path","exect","component","Login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"qbAmBeA,E,uKAdP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,QACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,SAAf,WACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,QAAf,sB,GARFI,a,oDC6GPC,E,4MA3GXC,MAAM,CACFC,SAAS,CACLC,MAAM,IAEVC,MAAM,CACFD,MAAM,IAEVE,SAAS,CACLF,MAAM,K,EAIdG,aAAa,SAACC,GACVA,EAAMC,iBACN,IAAIC,GAAY,EACZC,EAAS,CACTC,SAAU,EAAKV,MAAMC,SAASC,MAC9BS,KAAM,EAAKX,MAAMG,MAAMD,MACvBE,SAAU,EAAKJ,MAAMI,SAASF,OAElCU,IAAMC,IAAI,uDACLC,MAAK,SAAAC,GACF,IAAIC,EAAM,GACV,IAAI,IAAIC,KAAOF,EAASG,KACpBF,EAAMG,KAAKJ,EAASG,KAAKD,GAAKP,UAElC,IAAI,IAAIA,KAAYM,EACbA,EAAMN,KAAYD,EAASC,WAC1BF,GAAY,GAGjBA,EACCY,MAAM,uBAGNC,QAAQC,IAAIb,GACZG,IAAMW,KAAK,sDAAsDd,GAC5DK,MAAK,SAAAC,OAEHS,OAAM,SAAAC,GACTJ,QAAQC,IAAIG,W,EAOhCC,uBAAuB,SAACpB,GACpB,IAAIqB,EAAe,eACZ,EAAK3B,MAAMC,UAElB0B,EAAezB,MAAMI,EAAMsB,OAAO1B,MAClC,EAAK2B,SAAS,CAAC5B,SAAS0B,K,EAE5BG,oBAAoB,SAACxB,GACjB,IAAIqB,EAAe,eACZ,EAAK3B,MAAM+B,IAElBJ,EAAezB,MAAMI,EAAMsB,OAAO1B,MAClC,EAAK2B,SAAS,CAAC1B,MAAMwB,K,EAEzBK,uBAAuB,SAAC1B,GACpB,IAAIqB,EAAe,eACZ,EAAK3B,MAAM+B,IAElBJ,EAAezB,MAAMI,EAAMsB,OAAO1B,MAClC,EAAK2B,SAAS,CAACzB,SAASuB,K,uDAGlB,IAAD,OACL,OACI,yBAAK/B,UAAU,QACX,yBAAKA,UAAU,YAAf,YACA,kBAACqC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OACLC,YAAY,iBACZrC,MAAOsC,KAAKxC,MAAMC,SAASC,MAC3BuC,SAAU,SAACnC,GAAD,OAAS,EAAKoB,uBAAuBpB,OAEjE,kBAAC2B,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAClB,kBAACF,EAAA,EAAKG,MAAN,sBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,QACLC,YAAY,cACZrC,MAAOsC,KAAKxC,MAAMG,MAAMD,MACxBuC,SAAU,SAACnC,GAAD,OAAS,EAAKwB,oBAAoBxB,OAE9D,kBAAC2B,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,WACLC,YAAY,WACZrC,MAAOsC,KAAKxC,MAAMI,SAASF,MAC3BuC,SAAU,SAACnC,GAAD,OAAS,EAAK0B,uBAAuB1B,OAEjE,yBAAKV,UAAU,UACX,kBAAC8C,EAAA,EAAD,CAAQlD,QAAQ,UAAU8C,KAAK,SAASK,QAASH,KAAKnC,cAAtD,iB,GAjGDP,aCsFRC,G,mNArFXC,MAAM,CACFC,SAAS,CACLC,MAAM,IAEVE,SAAS,CACLF,MAAM,K,EAIdG,aAAa,SAACC,GACVA,EAAMC,iBACN,IAAIC,GAAY,EACZC,EACU,EAAKT,MAAMC,SAASC,MAD9BO,EAEU,EAAKT,MAAMI,SAASF,MAElCU,IAAMC,IAAI,uDACLC,MAAK,SAAAC,GACF,IAAIC,EAAM,GACV,IAAI,IAAIC,KAAOF,EAASG,KACpBF,EAAMG,KAAK,CAACJ,EAASG,KAAKD,GAAKP,SAASK,EAASG,KAAKD,GAAKb,WAG/D,IADA,IAAIwC,EAAE,EACAA,EAAE5B,EAAM6B,QACP7B,EAAM4B,GAAG,KAAKnC,GAAqBO,EAAM4B,GAAG,KAAKnC,IAChDD,GAAY,GAEhBoC,IAEApC,EAIAa,QAAQC,IAAI,aAHZF,MAAM,uB,EAStBM,uBAAuB,SAACpB,GACpB,IAAIqB,EAAe,eACZ,EAAK3B,MAAMC,UAElB0B,EAAezB,MAAMI,EAAMsB,OAAO1B,MAClC,EAAK2B,SAAS,CAAC5B,SAAS0B,K,EAE5BK,uBAAuB,SAAC1B,GACpB,IAAIqB,EAAe,eACZ,EAAK3B,MAAM+B,IAElBJ,EAAezB,MAAMI,EAAMsB,OAAO1B,MAClC,EAAK2B,SAAS,CAACzB,SAASuB,K,uDAGlB,IAAD,OACL,OACI,yBAAK/B,UAAU,QACX,yBAAKA,UAAU,YAAf,SACA,kBAACqC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OACLC,YAAY,iBACZrC,MAAOsC,KAAKxC,MAAMC,SAASC,MAC3BuC,SAAU,SAACnC,GAAD,OAAS,EAAKoB,uBAAuBpB,OAEjE,kBAAC2B,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,WACLC,YAAY,WACZrC,MAAOsC,KAAKxC,MAAMI,SAASF,MAC3BuC,SAAU,SAACnC,GAAD,OAAS,EAAK0B,uBAAuB1B,OAEjE,yBAAKV,UAAU,UACX,kBAAC8C,EAAA,EAAD,CAAQlD,QAAQ,UAAU8C,KAAK,SAASK,QAASH,KAAKnC,cAAtD,iB,GA3EDP,c,QCGjBgD,G,mNACF9C,MAAQ,CACJ+C,QAAS,CACL,CAACC,IAAK,SAAWC,IAAK,YAE1BC,QAAS,KACTC,QAAS,KACTC,aAAc,M,kEAIdC,UAAUC,YAAYC,oBAAmB,SAAUC,GAC/CnC,QAAQC,IAAI,gBAAiBkC,EAASC,OAAOC,UAC7CrC,QAAQC,IAAI,iBAAkBkC,EAASC,OAAOE,gB,+BA0C5C,IAAD,OAEL,OACI,6BACI,kBAAC,YAAD,CACIC,YAAa,GACbC,cAAe,CAACb,IAAK,SAAWC,IAAK,YAEpCT,KAAKxC,MAAM+C,QAAQe,KAAI,SAACC,EAAOnB,GAAR,OACpB,kBAAC,SAAD,CACI3B,IAAK2B,EACLY,SAAU,CACNR,IAAKe,EAAMf,IACXC,IAAKc,EAAMd,KAEfN,QAAS,WACL,EAAKd,SAAS,CAACuB,aAAcW,UAQxCvB,KAAKxC,MAAMoD,cACR,kBAAC,aAAD,CACIY,aAAc,WACV,EAAKnC,SAAS,CAACuB,aAAc,QAEjCI,SAAU,CACNR,IAAKR,KAAKxC,MAAMoD,aAAaJ,IAC7BC,IAAKT,KAAKxC,MAAMoD,aAAaH,MAGjC,6BACI,oCAkBA,mD,GA5GdnD,cAuHZmE,EAAaC,uBAAaC,wBAAcrB,IAE/B,SAASsB,IAChB,OACI,yBAAKC,MAAO,CAACC,MAAM,QAASC,OAAO,SAC/B,kBAACN,EAAD,CAAYO,aAAY,gGACpB,2CAEQC,eAAgB,yBAAKJ,MAAO,CAACE,OAAO,UACpCG,iBAAkB,yBAAKL,MAAO,CAACE,OAAO,UACtCI,WAAY,yBAAKN,MAAO,CAACE,OAAO,a,WChG7CK,E,4MApCXC,KAAK,WACDxD,QAAQC,IAAI,EAAKwD,MAAMC,SACvB,EAAKD,MAAMC,QAAQ5D,KAAK,gB,uDAGxB,OACI,yBAAKvB,UAAU,SACX,wCAAc4C,KAAKsC,MAAME,SACzB,8CAAoBxC,KAAKsC,MAAMG,aAC/B,yBAAKZ,MAAO,CAACa,MAAM,UACf,6CACA,uCAAc1C,KAAKsC,MAAMK,WAE7B,oCAAU3C,KAAKsC,MAAMM,UACrB,sCAAY5C,KAAKsC,MAAMO,QACvB,yCAEI7C,KAAKsC,MAAMQ,UAAUxB,KAAI,SAACyB,EAAQ3C,GAC9B,OACI,4BACI,4BAEK2C,Y,GAvBjBzF,aCUL0F,GCRM1F,Y,ODAN,WACP,OACI,yBAAKF,UAAU,WACX,4CACA,6G,SEuBD6F,G,OC5BS3F,Y,uKDSpB,OACI,yBAAKF,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8F,KAAK,OAAOC,OAAK,EAACC,UAAW9C,IACpC,kBAAC,IAAD,CAAO4C,KAAK,IAAIE,UAAWJ,IAC3B,kBAAC,IAAD,CAAOE,KAAK,iBAAiBE,UAAW7F,IACxC,kBAAC,IAAD,CAAO2F,KAAK,cAAcE,UAAWC,U,GATnC/F,cECEgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACG,kBAAC,EAAD,QAGPC,SAASC,eAAe,SDsHpB,kBAAmBlD,WACrBA,UAAUmD,cAAcC,MACrB3F,MAAK,SAAA4F,GACJA,EAAaC,gBAEdnF,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAMmF,c","file":"static/js/main.ca012590.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Nav,Navbar} from 'react-bootstrap'\r\n\r\nclass Toolbar extends Component{\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Navbar bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"/\">Home</Navbar.Brand>\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#home\">profile</Nav.Link>\r\n                        <Nav.Link href=\"/map\">Look Around</Nav.Link>\r\n                    </Nav>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Toolbar","import React, {Component} from \"react\";\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport \"./Register.css\"\r\nimport axios from 'axios'\r\nclass Register extends Component{\r\n    state={\r\n        username:{\r\n            value:''\r\n        },\r\n        email:{\r\n            value:''\r\n        },\r\n        password:{\r\n            value:''\r\n        }\r\n\r\n    }\r\n    orderHandler=(event)=>{\r\n        event.preventDefault();//prevent send a request\r\n        let isUserExist=false;\r\n        let userData={\r\n            userName: this.state.username.value,\r\n            mail: this.state.email.value,\r\n            password: this.state.password.value,\r\n        }\r\n        axios.get('https://buy-the-way-a829f.firebaseio.com/users.json')\r\n            .then(response=>{\r\n                let users=[]\r\n                for(let key in response.data){\r\n                    users.push(response.data[key].userName)\r\n                }\r\n                for(let userName in users){\r\n                    if(users[userName]===userData.userName){\r\n                        isUserExist=true;\r\n                    }\r\n                }\r\n                if(isUserExist){\r\n                    alert('User already exist')\r\n                }\r\n                else {\r\n                    console.log(userData)\r\n                    axios.post('https://buy-the-way-a829f.firebaseio.com/users.json',userData)\r\n                        .then(response=>{\r\n\r\n                        }).catch(error=>{\r\n                        console.log(error)\r\n                    })\r\n                    // this.props.history.push('/login')\r\n                }\r\n            })\r\n\r\n    }\r\n    usernameChangedHandler=(event)=>{\r\n        let updatedElement={\r\n            ...this.state.username\r\n        }\r\n        updatedElement.value=event.target.value;\r\n        this.setState({username:updatedElement});\r\n    }\r\n    emailChangedHandler=(event)=>{\r\n        let updatedElement={\r\n            ...this.state.id\r\n        }\r\n        updatedElement.value=event.target.value;\r\n        this.setState({email:updatedElement});\r\n    }\r\n    passwordChangedHandler=(event)=>{\r\n        let updatedElement={\r\n            ...this.state.id\r\n        }\r\n        updatedElement.value=event.target.value;\r\n        this.setState({password:updatedElement});\r\n        // console.log(this.state.password)\r\n    }\r\n    render() {\r\n        return(\r\n            <div className='Form'>\r\n                <div className=\"Headline\">Register</div>\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicUsername\">\r\n                        <Form.Label>username</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                                      placeholder=\"Enter username\"\r\n                                      value={this.state.username.value}\r\n                                      onChange={(event)=>this.usernameChangedHandler(event)}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Email address</Form.Label>\r\n                        <Form.Control type=\"email\"\r\n                                      placeholder=\"Enter email\"\r\n                                      value={this.state.email.value}\r\n                                      onChange={(event)=>this.emailChangedHandler(event)}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\"\r\n                                      placeholder=\"Password\"\r\n                                      value={this.state.password.value}\r\n                                      onChange={(event)=>this.passwordChangedHandler(event)}/>\r\n                    </Form.Group>\r\n                    <div className='Button'>\r\n                        <Button variant=\"primary\" type=\"submit\" onClick={this.orderHandler}>\r\n                            Submit\r\n                        </Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Register","import React, {Component} from \"react\";\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport \"./Login.css\"\r\nimport axios from 'axios'\r\nclass Register extends Component{\r\n    state={\r\n        username:{\r\n            value:''\r\n        },\r\n        password:{\r\n            value:''\r\n        }\r\n\r\n    }\r\n    orderHandler=(event)=>{\r\n        event.preventDefault();//prevent send a request\r\n        let isUserExist=false;\r\n        let userData={\r\n            userName: this.state.username.value,\r\n            password: this.state.password.value,\r\n        }\r\n        axios.get('https://buy-the-way-a829f.firebaseio.com/users.json')\r\n            .then(response=>{\r\n                let users=[]\r\n                for(let key in response.data){\r\n                    users.push([response.data[key].userName,response.data[key].password])\r\n                }\r\n                let i=0;\r\n                while(i<users.length){\r\n                    if(users[i][0]===userData.userName && users[i][1]===userData.password ){\r\n                        isUserExist=true;\r\n                    }\r\n                    i++\r\n                }\r\n                if(!isUserExist){\r\n                    alert('invalid details')\r\n                }\r\n                else {\r\n                    console.log(\"confirmed\")\r\n                    // this.props.history.push('/main')\r\n                }\r\n            })\r\n\r\n    }\r\n    usernameChangedHandler=(event)=>{\r\n        let updatedElement={\r\n            ...this.state.username\r\n        }\r\n        updatedElement.value=event.target.value;\r\n        this.setState({username:updatedElement});\r\n    }\r\n    passwordChangedHandler=(event)=>{\r\n        let updatedElement={\r\n            ...this.state.id\r\n        }\r\n        updatedElement.value=event.target.value;\r\n        this.setState({password:updatedElement});\r\n        // console.log(this.state.password)\r\n    }\r\n    render() {\r\n        return(\r\n            <div className='Form'>\r\n                <div className=\"Headline\">Login</div>\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicUsername\">\r\n                        <Form.Label>username</Form.Label>\r\n                        <Form.Control type=\"text\"\r\n                                      placeholder=\"Enter username\"\r\n                                      value={this.state.username.value}\r\n                                      onChange={(event)=>this.usernameChangedHandler(event)}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\"\r\n                                      placeholder=\"Password\"\r\n                                      value={this.state.password.value}\r\n                                      onChange={(event)=>this.passwordChangedHandler(event)}/>\r\n                    </Form.Group>\r\n                    <div className='Button'>\r\n                        <Button variant=\"primary\" type=\"submit\" onClick={this.orderHandler}>\r\n                            Submit\r\n                        </Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Register","import React, {Component} from \"react\";\r\nimport {GoogleMap,withScriptjs,withGoogleMap,Marker,InfoWindow} from 'react-google-maps'\r\nimport axios from 'axios'\r\nimport './Map.css'\r\n// import Orders from \"../Orders/Orders\";\r\n// import Order from '../Order/Order'\r\n// import icon from '../../assets/icon.jpg'\r\nclass Map extends Component {\r\n    state = {\r\n        markers: [\r\n            {lat: 31.243870, lng: 34.793991}\r\n        ],\r\n        initLat: null,\r\n        initLng: null,\r\n        selectedMark: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            console.log(\"Latitude is :\", position.coords.latitude);\r\n            console.log(\"Longitude is :\", position.coords.longitude);\r\n        });\r\n\r\n        // this.setState({markers:[{lat:}]})\r\n        // or you can set markers list somewhere else\r\n        // please also set your correct lat & lng\r\n        // you may only use 1 image for all markers, if then, remove the img_src attribute ^^\r\n        // axios.get('https://dean-project-291812.firebaseio.com/requests.json')\r\n        //     .then(response=>{\r\n        //         let requests=[]\r\n        //         for(let key in response.data){\r\n        //             let groceries=[]\r\n        //             for(let item in response.data[key].groceries){\r\n        //                 //console.log(item,\"item\")\r\n        //                 groceries.push(response.data[key].groceries[item])\r\n        //                 // console.log(response.data[key].groceries[item],\"itemss\")\r\n        //\r\n        //             }\r\n        //             // console.log(groceries)\r\n        //             let request={lat: response.data[key].location.lat,\r\n        //                 lng: response.data[key].location.lng,\r\n        //                 reason:response.data[key].reason,\r\n        //                 address:response.data[key].address,\r\n        //                 phoneNumber:response.data[key].PhoneNumber,\r\n        //                 where:response.data[key].whichHelp,\r\n        //                 groceries:groceries}\r\n        //             requests.push(request)\r\n        //         }\r\n        //         this.setState({markers:requests})\r\n        //         console.log(this.state.markers)\r\n        //     })\r\n    }\r\n\r\n    // test=(phoneNumber,address,groceries,fullName,reason)=>{\r\n    //     <Order\r\n    //         phoneNumber={phoneNumber}\r\n    //         address={address}\r\n    //         groceries={groceries}\r\n    //         fullName={fullName}\r\n    //         reason={reason}>\r\n    //     </Order>\r\n    // }\r\n    render() {\r\n        // console.log(this.state.markers)\r\n        return (\r\n            <div>\r\n                <GoogleMap\r\n                    defaultZoom={15}\r\n                    defaultCenter={{lat: 31.243870, lng: 34.793991}}\r\n                >\r\n                    {this.state.markers.map((place, i) => (\r\n                        <Marker\r\n                            key={i}\r\n                            position={{\r\n                                lat: place.lat,\r\n                                lng: place.lng,\r\n                            }}\r\n                            onClick={() => {\r\n                                this.setState({selectedMark: place})\r\n                            }}\r\n                            // icon={{\r\n                            //     url:icon,\r\n                            //     scaledSize: new window.google.maps.Size(25,25)\r\n                            // }}\r\n                        />\r\n                    ))}\r\n                    {this.state.selectedMark && (\r\n                        <InfoWindow\r\n                            onCloseClick={() => {\r\n                                this.setState({selectedMark: null});\r\n                            }}\r\n                            position={{\r\n                                lat: this.state.selectedMark.lat,\r\n                                lng: this.state.selectedMark.lng\r\n                            }}\r\n                        >\r\n                            <div>\r\n                                <p>hello</p>\r\n                                {/*<h2>Reason: {this.state.selectedMark.reason}</h2>*/}\r\n                                {/*<h3>Phone:{this.state.selectedMark.phoneNumber}</h3>*/}\r\n                                {/*<h3>where: {this.state.selectedMark.where}</h3>*/}\r\n                                {/*<h3>{this.state.selectedMark.groceries.length} items</h3>*/}\r\n                                {/*<h3>groceries: {this.state.selectedMark.groceries.map(grocery=> {*/}\r\n                                {/*    return(*/}\r\n                                {/*        <div>*/}\r\n                                {/*            <lu>*/}\r\n                                {/*                <li>*/}\r\n                                {/*                    {console.log(grocery,grocery.value)}*/}\r\n                                {/*                    {grocery.value}*/}\r\n                                {/*                </li>*/}\r\n                                {/*            </lu>*/}\r\n\r\n                                {/*        </div>*/}\r\n                                {/*    )*/}\r\n                                {/*})}</h3>*/}\r\n                                <a>full request</a>\r\n                            </div>\r\n                        </InfoWindow>\r\n                    )}\r\n                </GoogleMap>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst MapWrapped = withScriptjs(withGoogleMap(Map))\r\n\r\nexport default function MyMap() {\r\n        return(\r\n            <div style={{width:'100vw', height:'90vh'}}>\r\n                <MapWrapped googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${\r\n                    \"AIzaSyCz75H6TUotNy-TcGON0wmw5pjOM2quK6s\"\r\n                }`}\r\n                            loadingElement={<div style={{height:\"100%\"}}/>}\r\n                            containerElement={<div style={{height:\"100%\"}}/>}\r\n                            mapElement={<div style={{height:\"100%\"}}/>}\r\n\r\n                />\r\n            </div>\r\n        )\r\n}\r\n\r\n// export default GoogleApiWrapper({\r\n//     apiKey:(\"AIzaSyCz75H6TUotNy-TcGON0wmw5pjOM2quK6s\")\r\n// })(Map)","import React, {Component} from \"react\";\r\nimport './Order.css'\r\n\r\nclass order extends Component{\r\n    test=()=>{\r\n        console.log(this.props.history)\r\n        this.props.history.push(\"/auth/Login\")\r\n    }\r\n    render() {\r\n        return(\r\n            <div className='Order'>\r\n                <h1>Address: {this.props.address}</h1>\r\n                <h3>Phone number : {this.props.phoneNumber}</h3>\r\n                <div style={{float:'right'}}>\r\n                    <p >Distance: 100m</p>\r\n                    <p >Comments:{this.props.comments}</p>\r\n                </div>\r\n                <p>Name: {this.props.fullName}</p>\r\n                <p>Reason: {this.props.reason}</p>\r\n                <p >groceries:</p>\r\n                {\r\n                    this.props.groceries.map((grocery,i)=>{\r\n                        return(\r\n                            <lu>\r\n                                <li>\r\n                                    {/*{grocery.value}*/}\r\n                                    {grocery}\r\n                                </li>\r\n                            </lu>\r\n\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\nexport default order;","import React, {Component} from \"react\";\r\nimport Map from \"../../Map/Map\";\r\nimport Orders from \"../../Orders/Orders\";\r\nimport './MainPage.css'\r\nimport {Button}from 'react-bootstrap'\r\nconst MainPage=()=>{\r\n        return(\r\n            <div className='Content'>\r\n                <h1> buy the way</h1>\r\n                <h2>this website is a website for people that cant get out of there house.... </h2>\r\n            </div>\r\n        )\r\n}\r\nexport default MainPage","import React, {Component} from \"react\";\r\nimport axios from 'axios'\r\nimport Order from '../Orders/Order/Order'\r\n\r\n\r\nclass Orders extends Component{\r\n    state={\r\n        orders:[\r\n            {\r\n                lat: \"12321\",\r\n                lng: \"324234\" ,\r\n                reason:\"isolate\",\r\n                address:\"gat 8\",\r\n                phoneNumber:\"048243621\",\r\n                where:\"super\",\r\n                fullName:\"dean blinder\",\r\n                userName:\"deanblinder\",\r\n                groceries:[\"milk\",\"apple\"]\r\n            }\r\n        ],\r\n        loading:true\r\n    }\r\n    componentDidMount() {\r\n        // axios.get('https://dean-project-291812.firebaseio.com/requests.json')\r\n        //     .then(response=>{\r\n        //         let orders=[]\r\n        //         for(let key in response.data) {\r\n        //             let groceries=[]\r\n        //             for (let item in response.data[key].groceries) {\r\n        //                 groceries.push(response.data[key].groceries[item])\r\n        //             }\r\n        //             let request={\r\n        //                 lat: response.data[key].location.lat,\r\n        //                 lng: response.data[key].location.lng,\r\n        //                 reason:response.data[key].reason,\r\n        //                 address:response.data[key].location.address,\r\n        //                 phoneNumber:response.data[key].PhoneNumber,\r\n        //                 where:response.data[key].whichHelp,\r\n        //                 fullName:response.data[key].name+\" \"+response.data[key].lastName,\r\n        //                 userName:response.data[key].userName,\r\n        //                 groceries:groceries\r\n        //             }\r\n        //             orders.push(request)\r\n        //         }\r\n        //         this.setState({orders:orders})\r\n        //         console.log(orders)\r\n        //     })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.state.orders.map(order=>(\r\n                    <Order\r\n                        key={order.userName}\r\n                        phoneNumber={order.phoneNumber}\r\n                        address={order.address}\r\n                        groceries={order.groceries}\r\n                        fullName={order.fullName}\r\n                        reason={order.reason}/>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Orders","import React, {Component} from 'react';\nimport {Route,Switch} from 'react-router-dom';\nimport './App.css';\nimport Toolbar from \"./Component/Toolbar/Toolbar\";\nimport Register from './Component/Auth/Register/Register'\nimport Login from './Component/Auth/Login/Login'\nimport Map from './Component/Map/Map'\nimport MainPage from \"./Component/Pages/MainPage/MainPage\";\nimport OrderForm from \"./Component/OrderForm/OrderForm\";\n\n\nclass App extends Component {\n  render() {\n    return (\n        <div className='App'>\n            <Toolbar></Toolbar>\n            <Switch>\n                <Route path='/map' exect component={Map}/>\n                <Route path='/' component={MainPage}/>\n                <Route path='/auth/register' component={Register}/>\n                <Route path='/auth/login' component={Login}/>\n            </Switch>\n            {/*<Register></Register>*/}\n            {/*<Login></Login>*/}\n            {/*<Map></Map>*/}\n            {/*<OrderForm></OrderForm>*/}\n\n        </div>\n    )\n  }\n}\n\nexport default App;\n","import React, {Component} from \"react\";\r\nimport {Button, Form,Col} from \"react-bootstrap\";\r\nimport './OrderForm.css'\r\n\r\nclass OrderForm extends Component{\r\n    render() {\r\n        return(\r\n            <div className='Form'>\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>First name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter name\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Last name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter last name\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Phone number</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter phone number\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"exampleForm.SelectCustom\">\r\n                        <Form.Label>Reason</Form.Label>\r\n                        <Form.Control as=\"select\" custom>\r\n                            <option>In isolation</option>\r\n                            <option>In risk group</option>\r\n                            <option>other</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"exampleForm.SelectCustom\">\r\n                    <Form.Row>\r\n                        <Col xs={7}>\r\n                            <Form.Label>groceries</Form.Label>\r\n                            <Form.Control placeholder=\"Item\" />\r\n                        </Col>\r\n                        <Col>\r\n                            <div className='Input'>\r\n                            <Form.Control placeholder=\"number\" type=\"number\" min={1} max={10} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col>\r\n                            <div className='AddButton'>\r\n                            <Button variant=\"success\">Add</Button>\r\n                            </div>\r\n                        </Col>\r\n                        <Col>\r\n                            <div className='Input'>\r\n                            <Button variant=\"danger\">Remove</Button>\r\n                            </div>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n\r\n                </Form>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default OrderForm","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n         <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}